/*******************************************************************************************
  SIMPL+ Module Information
  (Fill in comments below)
*******************************************************************************************/
/*
Dealer Name:
System Name: baby timer for sleep/wake/TOD
System Number:
Programmer: GW
Comments:

 + TODO: if duration is negative (start time is in future), then duration should show
   negative, not 23:55 (wrapped) or whatever.
   Actually this problem is worse than that...more complicated; needs fixing.  FIXME
 + BUG: there are some probably unlikely race conditions when multiple simultaneous
   data changing events occur, but they could conceivably corrupt data.
   

*/

/*******************************************************************************************
  Compiler Directives
  (Uncomment and declare compiler directives as needed)
*******************************************************************************************/
// #ENABLE_DYNAMIC
// #SYMBOL_NAME ""
// #HINT ""
// #DEFINE_CONSTANT
// #CATEGORY "" 
// #PRINT_TO_TRACE
// #DIGITAL_EXPAND 
// #ANALOG_SERIAL_EXPAND 
// #OUTPUT_SHIFT 
// #HELP_PDF_FILE ""
#DEFAULT_VOLATILE
#ENABLE_STACK_CHECKING

#ENABLE_TRACE

// #ENCODING_ASCII
// #ENCODING_UTF16
// #ENCODING_INHERIT_FROM_PARENT
// #ENCODING_INHERIT_FROM_PROGRAM
/*
#HELP_BEGIN
   (add additional lines of help lines)
#HELP_END
*/

#DEFINE_CONSTANT UPDATE_INTERVAL 200	//200=2seconds refresh for h/m counter
#DEFINE_CONSTANT MAX_HISTORY 10
#DEFINE_CONSTANT MAXLEN_HISTORY_ITEM 25  // MAX_HISTORY * (MAXLEN_HISTORY_ITEM+1 for CR) must be less than the output string (system limited 255)
					// 0        1         2
					// 1234567890123456789012345 <-- MAXLEN_HISTORY_ITEM
					// SLEEP: 18:03 (12.5...     examples
					// SLEEP: 18:03 (12.5)

DIGITAL_INPUT
	sleep_pr,
	wake_pr,
	off_pr,
	time_inc_pr,
	time_dec_pr
	;

ANALOG_INPUT
	arg1,
	arg2
	;

STRING_OUTPUT
	tod$,
	since_title$,
	since_time$,
	duration_title$,
	duration_h$,
	duration_unit$,
	date$
	;
ANALOG_OUTPUT
	select_item#,
	deselect_item#
	;
STRING_OUTPUT
	history$[MAX_HISTORY,MAX_HISTORY]
	;

STRUCTURE time_entry {
	integer h, m, s;
	string dur[5];  //examples: "-12.0"  "-12", "4", "4.0", "4.1"  (text signed numbers with optional one-place decimal)
	string type[5];  // "SLEEP" | "WAKE" | "OFF" | ""
};

NONVOLATILE INTEGER
	save_select, i_curr;
NONVOLATILE STRING
	s_history[MAX_HISTORY][MAXLEN_HISTORY_ITEM];
STRING
	Curr_Dur[5];   // e.g. "-12.1" or "12.0";  avoid frequent rewriting to Nonvolatile memory
NONVOLATILE time_entry
	TE[MAX_HISTORY];
time_entry Now;



//
// Updates global Now.xxx time entry.
///
FUNCTION update_Now() {
	Now.h = GetHourNum();
	Now.m = GetMinutesNum();
	Now.s = GetSecondsNum();
}

//
// Outputs history string.
//
FUNCTION remake_history_string() {
	integer i;
	string color[6];

	for ( i = 1 to i_curr ) {

		/* Get color */
		if ( TE[i].type = "WAKE" ) {

			color = "a0ffa0";  //light green

		} else if ( TE[i].type = "SLEEP" ) {

			color = "7f7fff";  //blue

		} else if ( TE[i].type = "OFF" ) {

			color = "7f7f7f";  //blue

		} else {
			color = "ffffff";  //white

		}
		
		/* Current entry: append duration dynamically */
		/* (also guard against reading past array max) */
		if ( i = i_curr || i=MAX_HISTORY ) {
			/* Current (latest) history item: append duration dynamically */
			MakeString ( history$[i], "<font color=\"#%s\">%s: %u:%02u (%s...</font>", color, TE[i].type, TE[i].h, TE[i].m, Curr_Dur );
		} else {
			/* Regular (non-current) item: use structure value */
			MakeString ( history$[i], "<font color=\"#%s\">%s: %u:%02u (%s)</font>", color, TE[i].type, TE[i].h, TE[i].m, TE[i].dur );
		}
	}

}

//
// Calculates duration between specified two time entries.
// Returns string duration (5 chars max, could be negative).
//
STRING_FUNCTION calc_duration ( time_entry te1, time_entry te2 ) {	//te2 must be ByVal since we munge it for our calcs
	integer dur_dec;
	signed_integer dur_h;
	string ret[5];
	time_entry lt2;  //local copy of te2, so we don't munge the ByRef function arg
			 //(Note: S+ "ByVal" prefix does not actually work for structures;
			 //structures are passed by reference always, it seems)

	Trace ( "calc_duration()...\n" );

	/* Copy te2 for local use */
	lt2.h = te2.h;
	lt2.m = te2.m;
	lt2.s = te2.s;
	lt2.dur = te2.dur;
	lt2.type = te2.type;

	/* Wrap properly */
	if ( lt2.s < te1.s ) {
		lt2.s = lt2.s + 60;
		lt2.m = lt2.m - 1;
	}
	if ( lt2.m < te1.m ) {
		lt2.m = lt2.m + 60;
		lt2.h = lt2.h - 1;
	}
	if ( lt2.h < te1.h ) {
		lt2.h = lt2.h + 24;
	}
	if ( lt2.m < te1.m ) {
		/* m is before start m; check 12 hours either way */
		if ( te1.m - lt2.m < 12 ) {
			/* Within 12 hours earlier: time duration from m till te1 */
			dur_h = 0; //FIXME
			dur_dec = 0; //FIXME
			Trace ( ">>>dur_h within 12 hours earlier... FIXME\n" );


		} else {
			/* Within 12 hours later, must be after midnight: add 24 to h */
			//FIXME lt2.h = lt2.h + 24;
			Trace ( ">>>dur_h else within 12 hours later, must be after midnight; add 24 to te2.h... FIXME\n" );
		}
	}

	/* Get decimal */
	dur_h = lt2.h - te1.h;
	dur_dec = (lt2.m-te1.m) / 6; //60 shifted 1 decimal place
	Trace ( "\tlt2.m=%u:%d, te1.m=%u:%d  dur_h=%u:%d  dur_dec=%u\n", te2.m,te2.m, te1.m,te1.m, dur_h,dur_h, dur_dec );

	MakeString ( ret, "%d.%u", dur_h, dur_dec );  //no need to format with leading zeros
	return ( ret );

}

//
// Adds specified history item string to history array
// and updates the output string.
//
FUNCTION add_start_history ( string newType ) {
	integer i;
	string prev_dur[5];

	/* Shift list if full */
	if ( i_curr >= MAX_HISTORY ) {
		/* Shift entry up */
		for ( i = 2 to MAX_HISTORY ) {
			TE[i-1].h = TE[i].h;
			TE[i-1].m = TE[i].m;
			TE[i-1].s = TE[i].s;
			TE[i-1].dur = TE[i].dur;
			TE[i-1].type = TE[i].type;
		}
		TE[MAX_HISTORY].type = "";
		i_curr = MAX_HISTORY; //limit if overflowed
	} else {
		/* Pick next slot in list */
		i_curr = i_curr + 1;
	}

	update_Now();

	/* Add permanent duration to previous item if any */
	if ( i_curr > 1 ) {
		prev_dur = calc_duration ( TE[i_curr-1], Now );
		TE[i_curr-1].dur = prev_dur;
	}

	/* Add new entry */
	TE[i_curr].h = Now.h;
	TE[i_curr].m = Now.m;
	TE[i_curr].s = Now.s;
	TE[i_curr].type = newType;
	TE[i_curr].dur = "";  //current dur will be updated dynamically during update_times()
	MakeString ( since_time$, "%u:%02u", TE[i_curr].h, TE[i_curr].m );
	duration_title$ = "DURATION";
	duration_h$ = "0";
	duration_unit$ = "hr";

	/* Update output string */
	remake_history_string();
}

//
// Regular periodic call to update TOD clocks and duration fields outputs,
// as well as Duration globals (Dur_h, Dur_dec).
//
FUNCTION update_times() {	
	update_Now();
	Trace ( "update_times()...\n\ti_curr=%u\n", i_curr );

	/* Time of Day and Date */
	MakeString ( tod$, "%u:%02u", Now.h, Now.m );
	MakeString ( date$, "%s %s %u, %u", Left(Day(), 3), Left(Month(), 3), GetDateNum(), GetYearNum() );


	/* Calc duration between current entry start time and Now */
	Curr_Dur = calc_duration ( TE[i_curr], Now );
	Trace ( "\tCurr_Dur= {%s}\n", Curr_Dur );

	/* Output Duration only if in Sleep or Wake (not Off) */
	if ( select_item# = 1 || select_item# = 2 ) {
		//MakeString ( duration_h$, "%d.%u", Dur_h, Dur_dec );
		duration_h$ = Curr_Dur;
		duration_unit$ = "hr";
	}

	/* Update current history duration, in any mode */
	remake_history_string();
}

FUNCTION select_item ( integer sel ) {
	if ( sel != 1 ) deselect_item# = 1;
	if ( sel != 2 ) deselect_item# = 2;
	if ( sel != 3 ) deselect_item# = 3;
	select_item# = sel;
	save_select = sel;
}

//
// Adjusts current sleep/wake start time by specified # of minutes (positive or negative).
// Affects i_start_XXX, output fields, and history array.
//
FUNCTION inc_time ( signed_integer inc ) {
	integer sh, sm, ss;  //start h/m/s
	signed_integer m;   //temporary # of minutes during math, could go negative due to wrapping
	string prev_dur[5];

	/*** Current start time is TE[i_curr].xxx ***/

	/* Get current start h/m/s */
	sh = TE[i_curr].h;
	sm = TE[i_curr].m;
	ss = TE[i_curr].s;

	/* Start shifting m, and then we'll fix it if it overflows */
	m = TE[i_curr].m + inc;
	Trace ( "inc_time(%d) m=%d sh=%u, sm=%u,  m S/ 60=%u  m%60=%u m%60=%d\n", inc, m, sh, sm, m S/ 60, m%60, m%60 );

	/* Under/overflow m */
	sh = sh + ( m S/ 60 );  //signed division
	sh = sh % 24;
	while ( m < 0 ) {   //apparently MOD (%) does not work correctly for negative numbers, so mod negative numbers manually
		Trace ( "\t\tm=m+60 (m=%u:%d)\n", m,m );
		m = m + 60;  //shift 60 minutes forward
		sh = sh - 1;
		if ( sh < 0 ) sh = 23; //wrap to 23 (assuming sh was positive to begin with)
		Trace ( "\t\t\tsh <- %u:%d\n", sh, sh );
	}
	m = m % 60; //mod positive numbers
	Trace ( "\t\tm % 60 = (%u:%d)\n", m,m );
	sm = m;
	Trace ( "\tnewh=%u newm=%u, m=%u m=%d\n", sh, sm, m,m );
	m = m % 60;
	Trace ( "\tm=%u m=%d\n", m,m );

	/* Rewrite curr to global */
	TE[i_curr].h = sh;
	TE[i_curr].m = sm;
	TE[i_curr].s = ss;

	/* Update prior TE's duration, if prior TE exists */
	if ( i_curr > 1 ) {
		prev_dur = calc_duration ( TE[i_curr], Now );
		TE[i_curr - 1].dur = prev_dur;
		trace ( "\tupdating TE[i_curr-1 (%u)].dur = {%s}\n", i_curr-1, prev_dur );
	} else {
		trace ( "\tNOT updating TE[i_curr-1 (%u)].dur\n", i_curr-1 );
	}
	
	/* Update affected fields */
	MakeString ( since_time$, "%u:%02u", sh, sm);
	update_times();  //updates Dur_h and Dur_dec

	/* Reupdate history string with new curr and previous data */
	remake_history_string();

}

PUSH sleep_pr {
	//string s[13];
	select_item ( 1 );
	since_title$ = "SLEEPING SINCE";
	add_start_history ( "SLEEP" );
}
PUSH wake_pr {
	//string s[12];
	select_item ( 2 );
	since_title$ = "AWAKE SINCE";
	add_start_history ( "WAKE" );
}
PUSH off_pr {
	//string s[10];
	select_item ( 3 );
	since_title$ = "";
	since_time$ = "";
	duration_title$ = "";
	duration_h$ = "";
	duration_unit$ = "";
	add_start_history ( "OFF" );
	Delay ( 100 );
	deselect_item# = 3;  //darken hiliting when off
}
PUSH time_inc_pr {
	inc_time ( 10 );

}
PUSH time_dec_pr {
	inc_time ( -10 );

}
function Main() {

	/* Recall status */
	WaitForInitializationComplete();
	if ( save_select > 0 ) {
		select_item ( save_select ); //recall selection from NVRAM
		cswitch ( save_select ) {
			case (1): {
				since_title$ = "*SLEEPING SINCE";
				MakeString ( since_time$, "%u:%02u", TE[i_curr].h, TE[i_curr].m);
				duration_title$ = "*DURATION";
				break;
			}
			case (2): {
				since_title$ = "*AWAKE SINCE";
				MakeString ( since_time$, "%u:%02u", TE[i_curr].h, TE[i_curr].m);
				duration_title$ = "*DURATION";
				break;
			}
		}
	}
	
	/* Run main update loop */
	while ( 1 ) {
		update_times();
		Delay ( UPDATE_INTERVAL );
	}
}
CHANGE arg1
CHANGE arg2 {
	signed_integer r1;
	integer r2;
	r1 = arg1 MOD arg2;
	r2 = arg1 MOD arg2;
	Trace ( "(%u:%d) % (%u:%d) = (%u:%d)(%u:%d)\n", arg1,arg1, arg2,arg2, r1,r1, r2,r2 );
}
